<?php

/**
 * ProcessWire Parital Date Fieldtype
 *
 * Fieldtype for holding date allowing also partial dates (e.g. year and month only)
 * 
 * Copyright (C) 2015 by Richard Jedlička <jedlicka.r@gmail.com> (http://uiii.cz)
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class FieldtypePartialDate extends Fieldtype
{
	public static function getModuleInfo() 
	{
		return array(
			'title' => 'Parital date',
			'version' => 001,
			'summary' => 'Field that stores a date allowing also partial dates (e.g. year and month only)',
		);
	}

	/**
	 * Return the associated Inputfield
	 */
	public function getInputfield(Page $page, Field $field)
	{
		$inputfield = $this->modules->get('InputfieldPartialDate'); 
		$inputfield->class = $this->className();
		$inputfield->setPage($page); 

		return $inputfield; 
	}

	public function ___getCompatibleFieldtypes(Field $field)
	{
		return null;
	}

	/**
	 * Sanitize value for runtime
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value)
	{
		if($value instanceof PartialDate) {
			$item = $value; 
		} else { 
			$item = $page->__isset($field->name) ? $page->get($field->name) : $this->getBlankValue($page, $field); 
		}

		if($item->isChanged()) $page->trackChange($field->name); 

		return $item; 
	}

	/**
	 * Get a blank partial date item object
	 *
	 */
	public function getBlankValue(Page $page, Field $field) 
	{
		$item = new PartialDate(); 
		$item->setTrackChanges(true);
		return $item; 
	}

	/**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array $value
	 * @return string|int|array|object $value
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value)
	{
		$wakeValue = $this->getBlankValue($page, $field); 

		$wakeValue->year = $value['year'];
		$wakeValue->month = $value['month'];
		$wakeValue->day = $value['day'];

		$wakeValue->setTrackChanges(true); 
		return $wakeValue; 
	}

	/**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB. 
	 *              
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array|object $value
	 * @return string|int
	 *
	 */
	public function ___sleepValue(Page $page, Field $field, $value)
	{
		if(! $value instanceof PartialDate) return $value; 

		$sleepValue = array(
			'year' => $value->year, 
			'month' => $value->month, 
			'day' => $value->day, 
		);

		return $sleepValue; 
	}

	/**
	 * Return the database schema in specified format
	 *
	 */
	public function getDatabaseSchema(Field $field)
	{
		$schema = parent::getDatabaseSchema($field); 

		unset($schema['data']);
		unset($schema['keys']['data']);

		$schema['year'] = 'int DEFAULT NULL';
		$schema['month'] = 'int DEFAULT NULL';
		$schema['day'] = 'int DEFAULT NULL';

		return $schema;
	}
}

